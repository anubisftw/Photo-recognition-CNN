# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11wVzDRfzqW6dNy_-Q9PEor-usWE_OG5E
"""

!pip install keras

!pip install pillow

!pip install tensorflow

pip install opendatasets

"""##{"username":"patrickop","key":"810d4db961bc4e1ebacb3e24d9aa0e73"}"""

import opendatasets as od
import pandas
  

od.download(
    "https://www.kaggle.com/datasets/paultimothymooney/chest-xray-pneumonia?resource=download")

from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import Adam

from tensorflow import keras

# Create the train dataset
train_ds = keras.utils.image_dataset_from_directory(
    directory='/content/chest-xray-pneumonia/chest_xray/train',
    labels='inferred',
    label_mode='categorical',
    class_names=['NORMAL', 'PNEUMONIA'],
    batch_size=32,
    image_size=(256, 256))

# Create the validation dataset
validation_ds = keras.utils.image_dataset_from_directory(
    directory='/content/chest-xray-pneumonia/chest_xray/val',
    labels='inferred',
    label_mode='categorical',
    class_names=['NORMAL', 'PNEUMONIA'],
    batch_size=32,
    image_size=(256, 256))

# Create the test dataset
test_ds = keras.utils.image_dataset_from_directory(
    directory='/content/chest-xray-pneumonia/chest_xray/test',
    labels='inferred',
    label_mode='categorical',
    class_names=['NORMAL', 'PNEUMONIA'],
    batch_size=32,
    image_size=(256, 256))

img_shape = validation_ds.element_spec[0].shape

print("The shape of the images in the validation dataset is:", img_shape)

# Initialize the model
model = keras.Sequential()

# Add convolutional layers
model.add(keras.layers.Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(256, 256, 3)))
model.add(keras.layers.MaxPooling2D(pool_size=(2, 2)))
model.add(keras.layers.Conv2D(82, kernel_size=(3, 3), activation='relu'))
model.add(keras.layers.MaxPooling2D(pool_size=(2, 2)))
model.add(keras.layers.Conv2D(128, kernel_size=(3, 3), activation='relu'))
model.add(keras.layers.MaxPooling2D(pool_size=(2, 2)))

# Flatten the data for the fully connected layers
model.add(keras.layers.Flatten())

# Add fully connected layers
model.add(keras.layers.Dense(512, activation='relu'))
model.add(keras.layers.Dropout(0.5))
model.add(keras.layers.Dense(2, activation='softmax'))

# Compile the model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model
model.fit(train_ds, epochs=82, validation_data=validation_ds)

test_loss, test_acc = model.evaluate(test_ds)

print('Test accuracy:', test_acc)



